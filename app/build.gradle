apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    defaultConfig {
        applicationId "io.appium.uiautomator2"
        minSdkVersion 18
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            debuggable true
        }
        customDebuggableBuildType {
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    productFlavors {
        unitTest {
            applicationId 'io.appium.uiautomator2.unittest'
        }
        server {
            applicationId 'io.appium.uiautomator2.server'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'io.netty:netty-all:4.0.21.Final'
    compile 'com.android.support.test:runner:0.4'
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support:support-annotations:23.1.1'
    compile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
}

task installAUT(type: Exec) {
    group = 'test'
    description = 'Install app under test'
    def adb = android.getAdbExe().toString()
    def apk = file('..\\app\\src\\androidTestUnitTest\\java\\io\\appium\\uiautomator2\\unittest\\resource\\selendroid-test-app-debug.apk')
    commandLine "$adb install -rg $apk".split(' ')
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
    println ext.output.toString()
}


afterEvaluate {
    tasks.each { task ->
        if (task.name.startsWith('connectedUnitTestDebugAndroidTest')) {
            task.dependsOn installAUT
        }
    }
}
